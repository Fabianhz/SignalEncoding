The purpose of this program is to encode any digital data into digital signals. The coding schemes implemented in this program are: Nonreturn to Zero-Level (NRZ-L), Nonreturn to Zero Inverted (NRZ-I), Bipolar-AMI, Manchester, and Differential Manchester. 
NRZ-L and NRZ-I are somewhat like unipolar NRZ scheme but here we use two levels of amplitude (voltages). For NRZ-L(NRZ-Level), the level of the voltage determines the encoded bit, typically binary 1 map to negative voltage, and binary 0 map to high voltage, and for NRZ-I(NRZ-Invert), two-level signal has a transition at a boundary if the next input bit that we are going to transmit is a logical 1 and does not have a transition if the next bit that we are going to transmit is a logical 0.
Bipolar AMI has three voltage levels: negative, zero, and positive. If the starting input bit is 1 then the output signal can start at negative or positive, if it’s a zero then it will have a zero voltage. Next, every time the input bit is 1 then there will be a transition of voltage levels from either negative to positive or positive to negative based on the previous 1-bit transition. For example, the last input was 1 and it output negative, the next input 1 will be positive. If the input is 0 then it will be zero regardless.
Manchester encoding is somewhat combination of the RZ (transition at the middle of the bit) and NRZ-L schemes. The duration of the bit is divided into two halves. The voltage remains at one level during the first half and moves to the other level in the second half. The transition at the middle of the bit provides synchronization. When the input bit is a 1 then the voltage levels will shift to negative voltage then transition at the center to positive voltage. Similarly, when the input is zero then the encoded signal will start at positive voltage then transition in the middle to negative voltage. Like the Manchester encoding, the differential Manchester encoded signals have transitions at the center of the transmitted output. When starting, the input bit can be chosen to either output from negative to positive or positive to negative if the opposite bit input has the oppositive output. Next, if the next input is a 1, then it means that the output must transition at the start of the bit and of course it always transitions at the center. If the input bit is zero, then there will be no transition at start until it reaches the center.
 To run the program the user must specify the name of the data file in the first parameter and the code representing the coding scheme in the second parameter. There are four files that you need to have to run the program: encode.cpp, this is the main program which calls the schemes functions and outputs the data, schemes.h creates the functions that will be called by the main file. Schemes.cpp will be the file where all 5 schemes are implemented. Then inputdata.txt will contain the input data.
 The program must be compiled as 
g++ encode.cpp schemes.cpp -o encodes
then run as
./encode inputdata.txt schemecode
Where the scheme codes are represented as: 
Schemecode: NRZ-L = 0 ; NRZ-I = 1; B-AMI = 2; Manchester = 3; D-Manchester = 4;
 Once the user has chosen its preferred coding scheme, an output file should be created containing the encoded signal. The signal should be in terms of -V, +V, and 0V. Where "-V" represents negative voltage, "+V" positive voltage, and no voltage "0V”, each input bit transition will be denoted with a “|”.

